COMMANDS:
> dotnet new web
> docker network create pro290

==================================================
PASTES:
-------------------------------------------------
:name:.csproj:

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="6.0.6" />
    <PackageReference Include="MongoDB.Driver" Version="2.16.1" />
    <PackageReference Include="Steeltoe.Discovery.Eureka" Version="3.2.0" />
    <PackageReference Include="StackExchange.Redis" Version="2.2.4" />
  </ItemGroup>

------------------------------------------------
appsettings.json:

,
  "ConnectionStrings": {
    "mongo": "mongodb://localhost:27017",
    "redis": "localhost:6379"
  },
  "spring": {
    "application": {
      "name": "cart"
    }
  },
  "eureka": {
    "client": {
      "serviceUrl": "http://localhost:8761/eureka/",
      "shouldFetchRegistry": true,
      "shouldRegisterWithEureka": true,
      "validateCertificates": false
    },
    "instance": {}
  }

-------------------------------------------------
program.cs:

using Microsoft.EntityFrameworkCore;
using Steeltoe.Discovery.Client;
using Steeltoe.Common.Discovery;
using Steeltoe.Discovery.Eureka;
using Steeltoe.Discovery;

~ Under builder:

builder.Services.AddControllers();
builder.Services.AddDiscoveryClient(builder.Configuration);
var Origins = "_OriginsAllowed";
builder.Services.AddCors(options =>
{
    options.AddPolicy(name: Origins,
                      policy =>
                      {
                          policy.AllowAnyOrigin().AllowAnyHeader().AllowAnyMethod();
                      });
});

~ Under app:
app.MapControllers();
app.UseCors(Origins);

------------------------------------------------------
:Name:Controller.cs:

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MongoDB.Driver;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using StackExchange.Redis;

namespace capstone
{
    namespace Controllers
    {
        [ApiController]
        [Route("")]
        public class :Name:Controller : ControllerBase
        {
            private readonly IMongoDatabase _db;
            private readonly IMongoCollection<:Type:> collection;
            private readonly IDatabase authorization;
            public :Name:Controller(IConfiguration config) {
                var client = new MongoClient(config.GetConnectionString("mongo"));
                _db = client.GetDatabase("capstone");
                collection = _db.GetCollection<:Type:>("");

                var _redis = ConnectionMultiplexer.Connect(config.GetConnectionString("redis"));
                authorization = _redis.GetDatabase();
            }
        }
    }
}
==================================================
Course API:

/create
POST:
{
  "Code":"",
  "Name":""
}
returns: null
--------------------------------------------
/update/{id}
PUT:
{
  "Name":""
}
only changes name
returns: message
-----------------------------------------------
/delete/{id}
DELETE
returns: message
----------------------------------------------
/view?id=""&code=""
GET
if id provided, returns single Course (takes priority over code)
if code provided returns all code matches
if nothing provided returns all courses
returns: course
=====================================================
Account API:

/create?admin=""&auth=""
POST:
{
  "Admin":false,
  "Email":"",
  "Password":"",
  "FirstName":"",
  "LastName":"",
  "PreferredName":"",
  "AssignedCourse":"",
  "PreferredCourses":[],
  "ProfilePictureURL":"",
  "Links":[{}],
  "Status":""
}
returns: null
-------------------------------------------
/update/{id}?auth=""&admin=""
PUT:
{
  "Password":"",
  "PreferredName":"",
  "AssignedCourse":"",
  "PreferredCourses":[],
  "ProfilePictureURL":"",
  "Links":[{}],
  "Status":""
}
changes password, preferred name, assigned course, and preferred courses
returns: message 
-----------------------------------------
/login
POST:
{
  "Email":"",
  "Password":""
}
returns: login credentials (id, authorization, admin)
--------------------------------------
/logout/{id}
GET
returns: message
---------------------------------------
/view/{id}
GET
returns: limited account view (id, name, assigned course, preferred courses, profile picture url, link list, and status)
-------------------------------------
/batch
POST:
{
  "Accounts":[]
}
returns: list of limited account views (id, name, assigned course, preferred courses, profile picture url, link list, and status)
==================================================================================================
Schedule API: 

/create?auth=""&admin=""
POST:
{
  "CourseId":"",
  "AccountId":"",
  "Year":0,
  "Day":0,
  "StartTime":0,
  "Duration":0,
  "Room":""
}
returns: null
--------------------------------------------------
/delete/{id}?auth=""&userid=""
DELETE
returns: message
---------------------------------------------------
/find
POST:
{
  "Year":0,
  "Day":0,
  "StartTime":0,
  "EndTime":0,
  "Coaches":[],
  "Courses":[]
}
all values except day and year can be left null
returns: list of schedules